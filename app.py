import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
import tensorflow as tf
from tensorflow import keras
from sklearn.metrics import mean_absolute_error, r2_score, mean_squared_error

def main():
    st.set_page_config(page_title="AI Model Web App")
    
    # CSS ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÉ‡∏´‡∏°‡πà ‡πÇ‡∏î‡∏¢‡∏•‡∏î‡∏£‡∏∞‡∏¢‡∏∞‡∏´‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏ö
    st.markdown(
        """
        <style>
        /* ‡∏û‡∏∑‡πâ‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ */
        body {
            background: linear-gradient(135deg, #1e3c72, #2a5298);
            color: #ffffff;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        /* ‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡πÅ‡∏ï‡πà‡∏á‡πÅ‡∏ó‡πá‡∏ö */
        .stTabs [data-baseweb="tab-list"] {
            gap: 10px;  /* ‡∏õ‡∏£‡∏±‡∏ö‡∏à‡∏≤‡∏Å 40px ‡πÄ‡∏õ‡πá‡∏ô 10px ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡πá‡∏ö‡∏ä‡∏¥‡∏î‡∏Å‡∏±‡∏ô‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô */
            justify-content: center;
            background: rgba(255, 255, 255, 0.05);
            padding: 10px 0;
            border-radius: 15px;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
        }
        .stTabs [data-baseweb="tab"] {
            font-size: 18px;
            font-weight: 600;
            color: #e0e0e0;
            padding: 12px 25px;
            border-radius: 12px;
            background: linear-gradient(145deg, #2c3e50, #4ca1af);
            transition: all 0.4s ease;
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
        }
        .stTabs [data-baseweb="tab"]:hover {
            background: linear-gradient(145deg, #3498db, #5dade2);
            color: #ffffff;
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.25);
        }
        .stTabs [aria-selected="true"] {
            background: linear-gradient(145deg, #27ae60, #2ecc71) !important;
            color: #ffffff !important;
            box-shadow: 0 5px 15px rgba(39, 174, 96, 0.4);
        }
        
        /* ‡∏Å‡∏•‡πà‡∏≠‡∏á‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤ */
        .content-box {
            background: rgba(255, 255, 255, 0.08);
            padding: 25px;
            border-radius: 20px;
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.2);
            text-align: center;
            margin: 20px 0;
            border: 1px solid rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(5px);
        }
        
        /* ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠ */
        h1, h2, h3 {
            color: #f1c40f;
            text-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
        }
        
        /* ‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï‡πÅ‡∏•‡∏∞‡∏õ‡∏∏‡πà‡∏° */
        .stNumberInput > div > div, .stSelectbox > div > div {
            background: rgba(255, 255, 255, 0.1);
            border-radius: 10px;
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: #ffffff;
        }
        .stNumberInput input, .stSelectbox select {
            color: #ffffff;
        }
        
        /* ‡∏ï‡∏≤‡∏£‡∏≤‡∏á */
        .stDataFrame {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 15px;
            padding: 10px;
        }
        
        /* Animation */
        .stMarkdown {
            animation: fadeIn 1s ease-in-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }
        
        /* Scrollbar */
        ::-webkit-scrollbar {
            width: 10px;
        }
        ::-webkit-scrollbar-track {
            background: rgba(255, 255, 255, 0.05);
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb {
            background: #3498db;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #2980b9;
        }
        </style>
        """,
        unsafe_allow_html=True
    )

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ó‡πá‡∏ö‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
    tab1, tab2, tab3, tab4 = st.tabs(["üè† Overview", "üìä Model Machine Learning", "üìä Model Neural Network", "üìù Theory Of ML & NN"])

    with tab1:
        show_overview()

    with tab2:
        show_demo1()

    with tab3:
        show_demo2()

    with tab4:
        show_new_page()

def load_data():
    df = pd.read_csv("wine_data.csv")  # ‡∏õ‡∏£‡∏±‡∏ö path ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏´‡∏ô‡∏î
    df.fillna(df.mean(numeric_only=True), inplace=True)
    return df

def show_overview():
    st.title("Detail of Dataset")
    page = st.selectbox("üîç Select Category", ["‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DataSet (ML)", 
                                               "Feature Engineering (ML)", 
                                               "Fix missing Value DataSet",
                                               "‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DataSet (NN)",
                                               "Feature Engineering (NN)",                                           
                                               ])
    
    if page == "‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DataSet (ML)":
        st.subheader("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Data Set")
        st.write("**‡∏ó‡∏µ‡πà‡∏°‡∏≤:** Kaggle Website Platform Dataset")
        st.write(
            "‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Wine Dataset ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏≤‡∏á‡πÄ‡∏Ñ‡∏°‡∏µ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏•‡∏π‡∏Å‡πÉ‡∏ô‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏≠‡∏¥‡∏ï‡∏≤‡∏•‡∏µ "
            "‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏à‡∏±‡∏¢‡πÉ‡∏ô‡∏¢‡∏∏‡∏Ñ 1990s ‡πÅ‡∏•‡∏∞‡πÄ‡∏ú‡∏¢‡πÅ‡∏û‡∏£‡πà‡∏ú‡πà‡∏≤‡∏ô UCI Machine Learning Repository "
            "‡∏Å‡πà‡∏≠‡∏ô‡∏ñ‡∏π‡∏Å‡∏ô‡∏≥‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÅ‡∏û‡∏£‡πà‡∏´‡∏•‡∏≤‡∏¢‡πÉ‡∏ô Kaggle ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤‡∏™‡∏ô‡πÉ‡∏à‡∏ô‡∏≥‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏• Machine Learning "
            "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ **Proline** ‡∏ã‡∏∂‡πà‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≤‡∏£‡∏ï‡πâ‡∏≤‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡πÑ‡∏ß‡∏ô‡πå ‡πÅ‡∏•‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå "
            "‡∏ô‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå‡πÑ‡∏î‡πâ‡∏≠‡∏µ‡∏Å‡∏î‡πâ‡∏ß‡∏¢"
        )
        st.write("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Dataset Wine")
        df = pd.read_csv(r"dataset/wine-clustering.csv")
        st.dataframe(df)

    elif page == "‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• DataSet (NN)" :
        st.subheader("‡πÅ‡∏´‡∏•‡πà‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏≤‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Data Set")
        st.write("**‡∏ó‡∏µ‡πà‡∏°‡∏≤:** Kaggle Website Platform Dataset")
        st.write(
            "‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• accident ‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏£‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏î‡πÇ‡∏î‡∏¢ ‡∏à‡∏∞‡∏°‡∏µ‡πÄ‡∏û‡∏® ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà"
            "‡πÉ‡∏™‡πà‡∏´‡∏°‡∏ß‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà ‡∏ä‡πà‡∏ß‡∏á‡∏≠‡∏≤‡∏¢‡∏∏ ‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏® ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Model Neural Network ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏£‡∏≠‡∏î‡πÅ‡∏•‡∏∞‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏î ‡πÇ‡∏î‡∏¢‡πÉ‡∏´‡πâ"
            "‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏à‡∏≤‡∏Å Dataset ‡πÇ‡∏î‡∏¢‡∏ù‡∏∂‡∏Å‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏õ‡πá‡∏ô Supervised Learning"
        )
        df = pd.read_csv(r"dataset/accident.csv")
        st.dataframe(df)

    elif page == "Feature Engineering (NN)":
        st.subheader("Feature Engineering (Neural Network)")
        st.write("‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network ‡∏°‡∏≤‡∏à‡∏≤‡∏Å `accident.csv` ‡∏ã‡∏∂‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏ "
                "‡πÇ‡∏î‡∏¢‡πÄ‡∏£‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏ä‡πâ 5 ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï (Survived) ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:")
        
        st.write("""
        - **Seatbelt_Used**: ‡∏Å‡∏≤‡∏£‡∏™‡∏ß‡∏°‡πÄ‡∏Ç‡πá‡∏°‡∏Ç‡∏±‡∏î‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢ (Yes/No)
          - **‡∏ó‡∏µ‡πà‡∏°‡∏≤**: ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô dataset ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏ß‡∏°‡πÄ‡∏Ç‡πá‡∏°‡∏Ç‡∏±‡∏î‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          - **‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á**: ‡πÉ‡∏ä‡πâ LabelEncoder ‡πÅ‡∏õ‡∏•‡∏á 'Yes' ‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÅ‡∏•‡∏∞ 'No' ‡πÄ‡∏õ‡πá‡∏ô 0 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à‡πÑ‡∏î‡πâ
          - **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç**: ‡πÄ‡∏Ç‡πá‡∏°‡∏Ç‡∏±‡∏î‡∏ô‡∏¥‡∏£‡∏†‡∏±‡∏¢‡∏ä‡πà‡∏ß‡∏¢‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡πÉ‡∏ô‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏
        
        - **Speed_of_Impact**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏ì‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡∏ä‡∏ô (‡∏´‡∏ô‡πà‡∏ß‡∏¢: km/h)
          - **‡∏ó‡∏µ‡πà‡∏°‡∏≤**: ‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå
          - **‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á**: ‡πÄ‡∏ï‡∏¥‡∏° missing values ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (mean) ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏µ‡πâ
          - **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏ó‡∏µ‡πà‡∏•‡∏î‡∏•‡∏á
        
        - **Helmet_Used**: ‡∏Å‡∏≤‡∏£‡∏™‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡∏ô‡πá‡∏≠‡∏Å (Yes/No)
          - **‡∏ó‡∏µ‡πà‡∏°‡∏≤**: ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô dataset ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏ß‡∏°‡∏´‡∏°‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡∏ô‡πá‡∏≠‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          - **‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á**: ‡πÉ‡∏ä‡πâ LabelEncoder ‡πÅ‡∏õ‡∏•‡∏á 'Yes' ‡πÄ‡∏õ‡πá‡∏ô 1 ‡πÅ‡∏•‡∏∞ 'No' ‡πÄ‡∏õ‡πá‡∏ô 0
          - **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç**: ‡∏´‡∏°‡∏ß‡∏Å‡∏Å‡∏±‡∏ô‡∏ô‡πá‡∏≠‡∏Å‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏Å‡∏≤‡∏£‡∏ö‡∏≤‡∏î‡πÄ‡∏à‡πá‡∏ö‡∏ó‡∏µ‡πà‡∏®‡∏µ‡∏£‡∏©‡∏∞
        
        - **Age**: ‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡πÄ‡∏´‡∏ï‡∏∏ (‡∏´‡∏ô‡πà‡∏ß‡∏¢: ‡∏õ‡∏µ)
          - **‡∏ó‡∏µ‡πà‡∏°‡∏≤**: ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô dataset ‡πÅ‡∏™‡∏î‡∏á‡∏≠‡∏≤‡∏¢‡∏∏‡∏Ç‡∏≠‡∏á‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•
          - **‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á**: ‡πÄ‡∏ï‡∏¥‡∏° missing values ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (mean) ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ï‡πà‡∏≠‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á
          - **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç**: ‡∏≠‡∏≤‡∏¢‡∏∏‡∏≠‡∏≤‡∏à‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏£‡∏á‡∏ó‡∏≤‡∏á‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏™‡∏ô‡∏≠‡∏á‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏
        
        - **Gender**: ‡πÄ‡∏û‡∏®‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏£‡∏∞‡∏™‡∏ö‡πÄ‡∏´‡∏ï‡∏∏ (Male/Female/Unknown)
          - **‡∏ó‡∏µ‡πà‡∏°‡∏≤**: ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô dataset ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡πÄ‡∏û‡∏®
          - **‡∏Å‡∏≤‡∏£‡πÅ‡∏õ‡∏•‡∏á**: ‡πÄ‡∏ï‡∏¥‡∏° missing values ‡∏î‡πâ‡∏ß‡∏¢ 'Unknown' ‡πÅ‡∏•‡∏∞‡πÉ‡∏ä‡πâ LabelEncoder ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô 0 (Female), 1 (Male), 2 (Unknown)
          - **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç**: ‡πÄ‡∏û‡∏®‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏Ç‡∏±‡∏ö‡∏Ç‡∏µ‡πà
        """)


    elif page == "Feature Engineering (ML)":
        st.subheader("Feature Engineering (ML)")
        st.write("‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ **13 ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå** ‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:")
        st.write(
            "- **Alcohol**: ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÅ‡∏≠‡∏•‡∏Å‡∏≠‡∏Æ‡∏≠‡∏•‡πå (% ‡πÇ‡∏î‡∏¢‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ï‡∏£) ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡πâ‡∏ô\n"
            "- **Malic Acid**: ‡∏Å‡∏£‡∏î‡∏°‡∏≤‡∏•‡∏¥‡∏Å ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡∏£‡∏µ‡πâ‡∏¢‡∏ß‡πÅ‡∏•‡∏∞‡∏Å‡∏•‡∏¥‡πà‡∏ô‡∏ú‡∏•‡πÑ‡∏°‡πâ\n"
            "- **Ash**: ‡πÄ‡∏ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ú‡∏≤‡πÑ‡∏´‡∏°‡πâ ‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡πÅ‡∏£‡πà‡∏ò‡∏≤‡∏ï‡∏∏\n"
            "- **Ash Alcanity**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏î‡πà‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏ñ‡πâ‡∏≤ ‡∏™‡∏∞‡∏ó‡πâ‡∏≠‡∏ô‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏Å‡∏£‡∏î-‡∏î‡πà‡∏≤‡∏á\n"
            "- **Magnesium**: ‡∏õ‡∏£‡∏¥‡∏°‡∏≤‡∏ì‡πÅ‡∏°‡∏Å‡∏ô‡∏µ‡πÄ‡∏ã‡∏µ‡∏¢‡∏° ‡πÅ‡∏£‡πà‡∏ò‡∏≤‡∏ï‡∏∏‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏±‡∏Å\n"
            "- **Total Phenols**: ‡∏ü‡∏µ‡∏ô‡∏≠‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ù‡∏≤‡∏î\n"
            "- **Flavanoids**: ‡∏ü‡∏•‡∏≤‡πÇ‡∏ß‡∏ô‡∏≠‡∏¢‡∏î‡πå ‡∏™‡∏≤‡∏£‡∏ï‡πâ‡∏≤‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡πÅ‡∏•‡∏∞‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥\n"
            "- **Nonflavanoid Phenols**: ‡∏ü‡∏µ‡∏ô‡∏≠‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ü‡∏•‡∏≤‡πÇ‡∏ß‡∏ô‡∏≠‡∏¢‡∏î‡πå ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥\n"
            "- **Proanthocyanins**: ‡πÇ‡∏õ‡∏£‡πÅ‡∏≠‡∏ô‡πÇ‡∏ò‡πÑ‡∏ã‡∏¢‡∏≤‡∏ô‡∏¥‡∏ô ‡∏™‡∏≤‡∏£‡∏ï‡πâ‡∏≤‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ú‡∏•‡∏ï‡πà‡∏≠‡∏™‡∏µ\n"
            "- **Color Intensity**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏°‡∏Ç‡∏≠‡∏á‡∏™‡∏µ‡πÑ‡∏ß‡∏ô‡πå\n"
            "- **Hue**: ‡πÇ‡∏ó‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡πÑ‡∏ß‡∏ô‡πå ‡πÄ‡∏ä‡πà‡∏ô ‡πÅ‡∏î‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πà‡∏≠‡∏ô\n"
            "- **OD280/OD315 of Diluted Wines**: ‡∏Ñ‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏î‡∏Å‡∏•‡∏∑‡∏ô‡πÅ‡∏™‡∏á ‡∏ß‡∏±‡∏î‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÅ‡∏•‡∏∞‡∏ü‡∏µ‡∏ô‡∏≠‡∏•\n"
            "- **Proline**: ‡∏Å‡∏£‡∏î‡∏≠‡∏∞‡∏°‡∏¥‡πÇ‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢ ‡∏™‡∏≤‡∏£‡∏ï‡πâ‡∏≤‡∏ô‡∏≠‡∏ô‡∏∏‡∏°‡∏π‡∏•‡∏≠‡∏¥‡∏™‡∏£‡∏∞‡∏ö‡πà‡∏á‡∏ö‡∏≠‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û"
        )
        st.write("‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÄ‡∏´‡∏•‡πà‡∏≤‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢ Proline ‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏ß‡∏ô‡πå")

    elif page == "Fix missing Value DataSet":
        st.subheader("Fix Missing Value DataSet")
        st.write(
            "‡πÉ‡∏ô‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏à‡∏≤‡∏Å UCI ‡πÑ‡∏°‡πà‡∏°‡∏µ Missing Values ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏ó‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏≠‡∏≤‡∏à‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏î‡πâ "
            "‡πÄ‡∏£‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÇ‡∏î‡∏¢**‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ (Mean)** ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå ‡πÄ‡∏û‡∏£‡∏≤‡∏∞:\n"
            "- ‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n"
            "- ‡∏•‡∏î‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•\n"
            "- ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÇ‡∏°‡πÄ‡∏î‡∏• SVR ‡πÅ‡∏•‡∏∞ KNN ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô"
        )
        st.write("‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: ‡∏ñ‡πâ‡∏≤ Magnesium ‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢ ‡∏à‡∏∞‡πÄ‡∏ï‡∏¥‡∏°‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏±‡πâ‡∏ô")
        st.subheader("‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Missing Data ‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Train Model")
        st.write("‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢ ? : ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏∞‡πÑ‡∏£‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏¢ ‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ô‡∏±‡πâ‡∏ô ‡πÜ ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏î‡πÅ‡∏ó‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢‡πÑ‡∏õ")
        st.write("‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÉ‡∏´‡πâ Missing Data ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå‡πÉ‡∏´‡πâ‡∏Å‡∏±‡∏ö‡∏Å‡∏≤‡∏£ Train Mode")


def show_demo1():
    st.title("üìä Model Machine Learning: Proline Wine Prediction with SVR and KNN")
    
    svr_model_path = "modelml/svr_model_new.pkl"  # ‡∏õ‡∏£‡∏±‡∏ö path
    knn_model_path = "modelml/knn_model_new.pkl"  # ‡∏õ‡∏£‡∏±‡∏ö path
    scaler_path = "modelml/scaler.pkl"  # ‡∏õ‡∏£‡∏±‡∏ö path
    
    try:
        with open(svr_model_path, 'rb') as f:
            svr_model = pickle.load(f)
        with open(knn_model_path, 'rb') as f:
            knn_model = pickle.load(f)
        with open(scaler_path, 'rb') as f:
            scaler = pickle.load(f)
    except FileNotFoundError:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .pkl ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path!")
        return

    # Input: ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠
    st.subheader("Input Data")
    st.write("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 12 ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞ True Proline ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö:")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        alcohol = st.number_input("Alcohol", min_value=0.0, value=14.23)
        malic_acid = st.number_input("Malic Acid", min_value=0.0, value=1.71)
        ash = st.number_input("Ash", min_value=0.0, value=2.43)
    with col2:
        ash_alcanity = st.number_input("Ash Alcanity", min_value=0.0, value=15.6)
        magnesium = st.number_input("Magnesium", min_value=0.0, value=127.0)
        total_phenols = st.number_input("Total Phenols", min_value=0.0, value=2.8)
    with col3:
        flavanoids = st.number_input("Flavanoids", min_value=0.0, value=3.06)
        nonflavanoid_phenols = st.number_input("Nonflavanoid Phenols", min_value=0.0, value=0.28)
        proanthocyanins = st.number_input("Proanthocyanins", min_value=0.0, value=2.29)
    with col4:
        color_intensity = st.number_input("Color Intensity", min_value=0.0, value=5.64)
        hue = st.number_input("Hue", min_value=0.0, value=1.04)
        od280 = st.number_input("OD280", min_value=0.0, value=3.92)
        true_proline = st.number_input("True Proline", min_value=0.0, value=1065.0)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° True Proline

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡∏à‡∏≤‡∏Å Input
    input_data = pd.DataFrame({
        'Alcohol': [alcohol], 'Malic_Acid': [malic_acid], 'Ash': [ash], 'Ash_Alcanity': [ash_alcanity],
        'Magnesium': [magnesium], 'Total_Phenols': [total_phenols], 'Flavanoids': [flavanoids],
        'Nonflavanoid_Phenols': [nonflavanoid_phenols], 'Proanthocyanins': [proanthocyanins],
        'Color_Intensity': [color_intensity], 'Hue': [hue], 'OD280': [od280]
    })

    # ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÄ‡∏Å‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Input
    input_scaled = scaler.transform(input_data)

    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ SVR ‡πÅ‡∏•‡∏∞ KNN
    svr_pred = svr_model.predict(input_scaled)
    knn_pred = knn_model.predict(input_scaled)

    # Output: ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢
    st.subheader("Output: Predicted Proline")
    st.write("**True Proline (‡∏õ‡πâ‡∏≠‡∏ô‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠):**", true_proline)
    st.write("**SVR Prediction:**", svr_pred[0])
    st.write("**KNN Prediction:**", knn_pred[0])

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å
    svr_mae = mean_absolute_error([true_proline], svr_pred)
    svr_r2 = r2_score([true_proline], svr_pred)  # R¬≤ ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß ‡πÅ‡∏ï‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏ß‡πâ
    svr_rmse = np.sqrt(mean_squared_error([true_proline], svr_pred))

    knn_mae = mean_absolute_error([true_proline], knn_pred)
    knn_r2 = r2_score([true_proline], knn_pred)  # R¬≤ ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß ‡πÅ‡∏ï‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏ß‡πâ
    knn_rmse = np.sqrt(mean_squared_error([true_proline], knn_pred))

    # ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
    st.subheader("Model Comparison")
    comparison_df = pd.DataFrame({
        'Model': ['SVR', 'KNN'],
        'MAE': [svr_mae, knn_mae],
        'R¬≤': [svr_r2, knn_r2],
        'RMSE': [svr_rmse, knn_rmse]
    })
    st.write("**‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥:**")
    st.dataframe(comparison_df.style.format({"MAE": "{:.4f}", "R¬≤": "{:.4f}", "RMSE": "{:.4f}"}))

    # ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö True vs Predicted
    st.subheader("Visualization: True vs Predicted Proline")
    fig1, (ax1, ax2) = plt.subplots(1, 2, figsize=(14, 6))
    
    # ‡∏Å‡∏£‡∏≤‡∏ü SVR
    ax1.scatter([true_proline], svr_pred, c='blue', edgecolor='k', s=100, label='SVR Prediction')
    ax1.plot([true_proline, true_proline], [true_proline, svr_pred[0]], 'b--', lw=2)
    ax1.set_xlabel('True Proline')
    ax1.set_ylabel('Predicted Proline (SVR)')
    ax1.set_title(f'SVR: True vs Predicted\nMAE: {svr_mae:.2f}, RMSE: {svr_rmse:.2f}')
    ax1.legend()

    # ‡∏Å‡∏£‡∏≤‡∏ü KNN
    ax2.scatter([true_proline], knn_pred, c='green', edgecolor='k', s=100, label='KNN Prediction')
    ax2.plot([true_proline, true_proline], [true_proline, knn_pred[0]], 'g--', lw=2)
    ax2.set_xlabel('True Proline')
    ax2.set_ylabel('Predicted Proline (KNN)')
    ax2.set_title(f'KNN: True vs Predicted\nMAE: {knn_mae:.2f}, RMSE: {knn_rmse:.2f}')
    ax2.legend()

    plt.tight_layout()
    st.pyplot(fig1)

    # ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÄ‡∏°‡∏ï‡∏£‡∏¥‡∏Å
    st.subheader("Visualization: Metric Comparison")
    fig2, ax = plt.subplots(figsize=(10, 6))
    comparison_df_melted = comparison_df.melt(id_vars=['Model'], value_vars=['MAE', 'R¬≤', 'RMSE'], var_name='Metric', value_name='Value')
    sns.barplot(x='Metric', y='Value', hue='Model', data=comparison_df_melted, palette='viridis', ax=ax)
    ax.set_title('Comparison of SVR and KNN Metrics')
    ax.set_ylabel('Value')
    for p in ax.patches:
        ax.annotate(f'{p.get_height():.2f}', (p.get_x() + p.get_width() / 2., p.get_height()), 
                    ha='center', va='bottom', fontsize=10)
    plt.tight_layout()
    st.pyplot(fig2)

def show_demo2():
    st.title("üìà Neural Network Model: Survival Prediction")
    st.write("‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ Neural Network ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Seatbelt_Used, Speed_of_Impact, Helmet_Used, Age, ‡πÅ‡∏•‡∏∞ Gender")

    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Neural Network
    nn_model_path = "modelml/neural_network_model.keras"  # ‡∏õ‡∏£‡∏±‡∏ö path ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ü‡πÑ‡∏ß‡πâ
    try:
        nn_model = keras.models.load_model(nn_model_path)
    except FileNotFoundError:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå neural_network_model.keras ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö path!")
        return

    # Input: ‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢‡∏°‡∏∑‡∏≠ (5 inputs)
    st.subheader("Input Data")
    st.write("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 5 ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï:")
    col1, col2, col3, col4, col5 = st.columns(5)
    with col1:
        seatbelt_used = st.selectbox("Seatbelt Used", ["Yes", "No"])
    with col2:
        speed_of_impact = st.number_input("Speed of Impact (km/h)", min_value=0.0, value=50.0)
    with col3:
        helmet_used = st.selectbox("Helmet Used", ["Yes", "No"])
    with col4:
        age = st.number_input("Age", min_value=0, value=30)
    with col5:
        gender = st.selectbox("Gender", ["Male", "Female", "Unknown"])

    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• input ‡πÄ‡∏õ‡πá‡∏ô numerical
    seatbelt_used_num = 1 if seatbelt_used == "Yes" else 0
    helmet_used_num = 1 if helmet_used == "Yes" else 0
    gender_num = {"Male": 1, "Female": 0, "Unknown": 2}.get(gender)  # ‡πÅ‡∏õ‡∏•‡∏á Gender ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö LabelEncoder
    input_data = np.array([[seatbelt_used_num, speed_of_impact, helmet_used_num, age, gender_num]])

    # ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Neural Network
    nn_pred = nn_model.predict(input_data)[0][0]

    st.subheader("Output: Survival Prediction")
    st.write(f"**Probability of Not Surviving (1 = Not Survived, 0 = Survived):** {nn_pred:.4f}")
    survival_text = "Survived" if nn_pred > 0.50 else "Not Survived" 
    st.write(f"**Prediction:** {survival_text}")

    # Visualization
    st.subheader("Visualization: Prediction Probability")
    fig, ax = plt.subplots(figsize=(6, 4))
    ax.bar(["Probability"], [nn_pred], color='orange' if nn_pred > 0.50 else 'red', alpha=0.7) 
    ax.set_ylim(0, 1)
    ax.set_ylabel("Probability")
    ax.set_title("Neural Network Prediction Probability")
    ax.axhline(0.50, color='gray', linestyle='--', label='Threshold (0.500)')  
    ax.text(0, nn_pred + 0.05, f'{nn_pred:.4f}', ha='center', va='bottom')
    ax.legend()
    plt.tight_layout()
    st.pyplot(fig)

    st.write("""
    **‡∏Å‡∏≤‡∏£‡∏ï‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå:**
    - ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡πà‡∏≤‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô (0 ‡∏ñ‡∏∂‡∏á 1)
    - ‡∏ñ‡πâ‡∏≤ > 0.50: ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ß‡πà‡∏≤‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï (Survived)
    - ‡∏ñ‡πâ‡∏≤ <= 0.50: ‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï (Not Survived)
    """)

def show_new_page():
    st.title("üìä Theory of ML and How to Devlopment Model")
    page = st.selectbox("üîç Select Category", ["Algorithm ML",
                                               "Algorithm NN", 
                                               "Devlopment ML", 
                                               "Devlopment NN"])
    
    if page == "Algorithm ML":
        st.subheader("SVR (Support Vector Regression)")
        st.write("SVR ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏ô‡∏∂‡πà‡∏á‡πÉ‡∏ô‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ‡∏Ç‡∏≠‡∏á Support Vector Machine (SVM) ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏á‡∏≤‡∏ô Regression (‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç) "
        "‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô Classification (‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó) ‡∏ã‡∏∂‡πà‡∏á SVM ‡πÄ‡∏î‡∏¥‡∏°‡∏ñ‡∏π‡∏Å‡∏≠‡∏≠‡∏Å‡πÅ‡∏ö‡∏ö‡∏°‡∏≤ SVM ‡∏à‡∏∞‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ô‡∏≤‡∏ö (Hyperplane) ‡∏ó‡∏µ‡πà‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î "
        "‡πÅ‡∏ï‡πà‡πÉ‡∏ô SVR ‡∏à‡∏∞‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô (‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏∞‡∏ô‡∏≤‡∏ö‡πÉ‡∏ô‡∏°‡∏¥‡∏ï‡∏¥‡∏™‡∏π‡∏á) ‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô‡πÅ‡∏•‡∏∞‡∏ó‡∏ô‡∏ï‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏•‡∏≤‡∏î‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô")
        st.image("img/SVR.png",caption="SVR")
        st.subheader("KNN (K-Nearest Neighbors)")
        st.write("KNN ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏•‡∏Å‡∏≠‡∏£‡∏¥‡∏ó‡∏∂‡∏° Machine Learning ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÅ‡∏ï‡πà‡∏ó‡∏£‡∏á‡∏û‡∏•‡∏±‡∏á ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£ '‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ô‡∏ö‡πâ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î'" 
        "‡πÇ‡∏î‡∏¢‡∏õ‡∏Å‡∏ï‡∏¥ KNN ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô Classification (‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó) ‡πÅ‡∏ï‡πà‡πÉ‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì "
        "‡πÄ‡∏£‡∏≤‡πÉ‡∏ä‡πâ KNN Regression (KNeighborsRegressor) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô Proline")
        st.image("img/KNN.png",caption="KNN")

    elif page == "Algorithm NN":
        st.subheader("Neural Network")
        st.write(
        "Neural Network (NN) ‡πÄ‡∏õ‡πá‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÅ‡∏£‡∏á‡∏ö‡∏±‡∏ô‡∏î‡∏≤‡∏•‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏°‡∏≠‡∏á‡∏°‡∏ô‡∏∏‡∏©‡∏¢‡πå ‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ß‡πà‡∏≤ "
        "Neuron ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ã‡∏∂‡πà‡∏á‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡πÑ‡∏õ‡∏î‡πâ‡∏ß‡∏¢ 3 ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏Å ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà:")

        st.markdown(
        """
        - **Input Layer (‡∏ä‡∏±‡πâ‡∏ô‡∏≠‡∏¥‡∏ô‡∏û‡∏∏‡∏ï):** ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô Feature ‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡πÇ‡∏°‡πÄ‡∏î‡∏•
        - **Hidden Layers (‡∏ä‡∏±‡πâ‡∏ô‡∏ã‡πà‡∏≠‡∏ô):** ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ Weights ‡πÅ‡∏•‡∏∞ Activation Function ‡πÄ‡∏ä‡πà‡∏ô ReLU ‡∏´‡∏£‡∏∑‡∏≠ Sigmoid
        - **Output Layer (‡∏ä‡∏±‡πâ‡∏ô‡πÄ‡∏≠‡∏≤‡∏ï‡πå‡∏û‡∏∏‡∏ï):** ‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• ‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏ß‡πà‡∏≤ "‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï" ‡∏´‡∏£‡∏∑‡∏≠ "‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏î‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï"
        """)

        st.write(
        "Neural Network ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ Forward Propagation ‡πÅ‡∏•‡∏∞ Backward Propagation "
        "‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ ‡∏ã‡∏∂‡πà‡∏á‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏±‡πâ‡∏á Classification ‡πÅ‡∏•‡∏∞ Regression")
        st.image("img/NN.png",caption="Neural Network Layer")

    elif page == "Devlopment ML":
        st.subheader("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ Model ML")
        st.write("1.‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ‡πà‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏ô")
        code = '''import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVR
from sklearn.neighbors import KNeighborsRegressor
from sklearn.cluster import KMeans
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
import pickle
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("2.‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Missing Values")
        code = '''data = pd.read_csv('wine-clustering.csv')

# ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Missing Values ‡∏î‡πâ‡∏ß‡∏¢‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç)
data.fillna(data.mean(numeric_only=True), inplace=True)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("3. ‡πÅ‡∏¢‡∏Å Input (X) ‡πÅ‡∏•‡∏∞ Output (y)")
        code = '''X = data.drop(columns=['Proline'])  # ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡∏¢‡∏Å‡πÄ‡∏ß‡πâ‡∏ô Proline
y = data['Proline']  # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("4. ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Train/Test")
        code = '''np.random.seed(42)  # ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÑ‡∏î‡πâ
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("5.‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÄ‡∏Å‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ StandardScaler")
        code = '''scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

# ‡∏õ‡∏£‡∏±‡∏ö y ‡∏î‡πâ‡∏ß‡∏¢ StandardScaler ‡πÄ‡∏ä‡πà‡∏ô‡∏Å‡∏±‡∏ô
y_scaler = StandardScaler()
y_train_scaled = y_scaler.fit_transform(y_train.values.reshape(-1, 1)).ravel()
y_test_scaled = y_scaler.transform(y_test.values.reshape(-1, 1)).ravel()
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("6. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á SVR ‡∏î‡πâ‡∏ß‡∏¢ GridSearchCV")
        code = '''svr = SVR(kernel='rbf')

param_grid_svr = {
    'C': [50, 100, 200],
    'epsilon': [0.01, 0.1],
    'gamma': ['scale', 0.01, 0.1]
}

grid_search_svr = GridSearchCV(svr, param_grid_svr, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)
grid_search_svr.fit(X_train_scaled, y_train_scaled)

best_svr = grid_search_svr.best_estimator_
y_pred_svr_scaled = best_svr.predict(X_test_scaled)
y_pred_svr = y_scaler.inverse_transform(y_pred_svr_scaled.reshape(-1, 1)).ravel()

svr_mse = mean_squared_error(y_test, y_pred_svr)
svr_r2 = r2_score(y_test, y_pred_svr)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("7. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏á KNN ‡∏î‡πâ‡∏ß‡∏¢ GridSearchCV")
        code = '''knn = KNeighborsRegressor()

param_grid_knn = {
    'n_neighbors': [3, 5, 7],
    'weights': ['uniform', 'distance'],
    'p': [1, 2]
}

grid_search_knn = GridSearchCV(knn, param_grid_knn, cv=5, scoring='neg_mean_squared_error', n_jobs=-1)
grid_search_knn.fit(X_train_scaled, y_train)

best_knn = grid_search_knn.best_estimator_
y_pred_knn = best_knn.predict(X_test_scaled)

knn_mse = mean_squared_error(y_test, y_pred_knn)
knn_r2 = r2_score(y_test, y_pred_knn)

'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("8. ‡πÉ‡∏ä‡πâ KMeans ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
        code = '''y_combined = np.column_stack((y_test, y_pred_svr, y_pred_knn))

kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
clusters = kmeans.fit_predict(y_combined)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("8. ‡πÉ‡∏ä‡πâ KMeans ‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå")
        code = '''y_combined = np.column_stack((y_test, y_pred_svr, y_pred_knn))

kmeans = KMeans(n_clusters=3, random_state=42, n_init=10)
clusters = kmeans.fit_predict(y_combined)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("9. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏≤‡∏ü")
        code = '''plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
scatter = plt.scatter(y_test, y_pred_svr, c=clusters, cmap='viridis', edgecolor='k', s=100, alpha=0.7)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.xlabel('True Proline')
plt.ylabel('Predicted Proline (SVR)')
plt.title('SVR: True vs Predicted Proline')
plt.colorbar(scatter, label='Cluster')

plt.subplot(1, 2, 2)
scatter = plt.scatter(y_test, y_pred_knn, c=clusters, cmap='viridis', edgecolor='k', s=100, alpha=0.7)
plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
plt.xlabel('True Proline')
plt.ylabel('Predicted Proline (KNN)')
plt.title('KNN: True vs Predicted Proline')
plt.colorbar(scatter, label='Cluster')

plt.tight_layout()
plt.show()
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("9. ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏£‡∏≤‡∏ü")
        code = '''with open('svr_model.pkl', 'wb') as f:
    pickle.dump(best_svr, f)

with open('knn_model.pkl', 'wb') as f:
    pickle.dump(best_knn, f)

with open('scaler.pkl', 'wb') as f:
    pickle.dump(scaler, f)

with open('y_scaler.pkl', 'wb') as f:
    pickle.dump(y_scaler, f)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
        st.image("img/download.png",caption="Result training")

    elif page == "Devlopment NN":
        st.subheader("‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤ Model NN")

        st.write("1.Import Libraries")
        code = '''import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from tensorflow import keras
from tensorflow.keras import layers
import joblib
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("2: ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ Missing Values")
        code = '''# ‡∏≠‡πà‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
data = pd.read_csv('/content/accident.csv')  # ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏à‡∏£‡∏¥‡∏á‡∏ñ‡πâ‡∏≤‡∏°‡∏µ

# ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ missing data
data['Speed_of_Impact'] = data['Speed_of_Impact'].fillna(data['Speed_of_Impact'].mean())  # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
data['Age'] = data['Age'].fillna(data['Age'].mean())  # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
data['Gender'] = data['Gender'].fillna('Unknown')  # ‡πÄ‡∏ï‡∏¥‡∏°‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô 'Unknown'
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("3: ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Categorical ‡πÄ‡∏õ‡πá‡∏ô Numerical")
        code = '''# ‡πÅ‡∏õ‡∏•‡∏á categorical variables ‡πÄ‡∏õ‡πá‡∏ô numerical
le = LabelEncoder()
data['Seatbelt_Used'] = le.fit_transform(data['Seatbelt_Used'])
data['Helmet_Used'] = le.fit_transform(data['Helmet_Used'])
data['Gender'] = le.fit_transform(data['Gender'])  # ‡πÅ‡∏õ‡∏•‡∏á Gender (Male/Female/Unknown) ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ missing values
print("Missing values after imputation:")
print(data.isnull().sum())
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("4: ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Features ‡πÅ‡∏•‡∏∞ Target")
        code = '''# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° features ‡πÅ‡∏•‡∏∞ target
X = data[['Seatbelt_Used', 'Speed_of_Impact', 'Helmet_Used', 'Age', 'Gender']].values
y = data['Survived'].values

# ‡πÅ‡∏õ‡∏•‡∏á output: 1 (‡∏£‡∏≠‡∏î) -> 0 ‡πÅ‡∏•‡∏∞ 0 (‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏î) -> 1
y = 1 - y
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("5: ‡πÅ‡∏ö‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Train/Test")
        code = '''# ‡πÅ‡∏ö‡πà‡∏á train/test set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("6: ‡∏™‡∏£‡πâ‡∏≤‡∏á Neural Network Mode")
        code = '''# ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏°‡πÄ‡∏î‡∏• (‡∏£‡∏±‡∏ö 5 inputs)
model = keras.Sequential([
    layers.Input(shape=(5,)),  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏£‡∏±‡∏ö 5 inputs
    layers.Dense(32, activation='relu'),
    layers.Dense(1, activation='sigmoid')
])
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("7: Compile ‡πÅ‡∏•‡∏∞ Train ‡πÇ‡∏°‡πÄ‡∏î‡∏•")
        code = '''# Compile ‡πÇ‡∏°‡πÄ‡∏î‡∏•
model.compile(
    optimizer='adam',
    loss='binary_crossentropy',
    metrics=['accuracy']
)

# Train ‡πÇ‡∏°‡πÄ‡∏î‡∏•
history = model.fit(
    X_train, y_train,
    epochs=100,
    batch_size=1,
    validation_split=0.2,
    verbose=1
)
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("8: Evaluate ‡πÇ‡∏°‡πÄ‡∏î‡∏•")
        code = '''# Evaluate ‡πÇ‡∏°‡πÄ‡∏î‡∏•
test_loss, test_accuracy = model.evaluate(X_test, y_test)
print(f"\nTest accuracy: {test_accuracy:.4f}")
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("9: ‡πÄ‡∏ã‡∏ü‡πÇ‡∏°‡πÄ‡∏î‡∏• (2 ‡∏ß‡∏¥‡∏ò‡∏µ)")
        code = '''# ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 1: ‡πÄ‡∏ã‡∏ü‡πÄ‡∏õ‡πá‡∏ô .pkl ‡∏î‡πâ‡∏ß‡∏¢ joblib
joblib.dump(model, 'neural_network_model.pkl')
print("Model saved as neural_network_model.pkl using joblib")

# ‡∏ß‡∏¥‡∏ò‡∏µ‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏ã‡∏ü‡πÅ‡∏ö‡∏ö Keras native (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥)
model.save('neural_network_model.keras')
print("Model saved as neural_network_model.keras using Keras native format")
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)

        st.write("10: ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÅ‡∏•‡∏∞‡∏ó‡∏î‡∏™‡∏≠‡∏ö Predict")
        code = '''# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏ã‡∏ü‡πÑ‡∏ß‡πâ
loaded_model_keras = keras.models.load_model('neural_network_model.keras')

# ‡∏ó‡∏î‡∏™‡∏≠‡∏ö predict
sample = np.array([[1, 50, 1, 30, 1]])  # Seatbelt_Yes, Speed_50, Helmet_Yes, Age_30, Gender_Male(1)
prediction = loaded_model_keras.predict(sample)
print(f"Prediction (0 = survived, 1 = not survived): {prediction[0][0]:.4f}")
'''
        st.code(code, language="python", line_numbers=False, wrap_lines=False, height=False)
        
if __name__ == "__main__":
    main()